/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Todo as PrismaTodo,
  Reminder as PrismaReminder,
  User as PrismaUser,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class TodoServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.TodoCountArgs, "select">): Promise<number> {
    return this.prisma.todo.count(args);
  }

  async todos(args: Prisma.TodoFindManyArgs): Promise<PrismaTodo[]> {
    return this.prisma.todo.findMany(args);
  }
  async todo(args: Prisma.TodoFindUniqueArgs): Promise<PrismaTodo | null> {
    return this.prisma.todo.findUnique(args);
  }
  async createTodo(args: Prisma.TodoCreateArgs): Promise<PrismaTodo> {
    return this.prisma.todo.create(args);
  }
  async updateTodo(args: Prisma.TodoUpdateArgs): Promise<PrismaTodo> {
    return this.prisma.todo.update(args);
  }
  async deleteTodo(args: Prisma.TodoDeleteArgs): Promise<PrismaTodo> {
    return this.prisma.todo.delete(args);
  }

  async uploadImage<T extends Prisma.TodoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TodoFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaTodo> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.todo.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.TodoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TodoFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.todo.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.TodoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TodoFindUniqueArgs>
  ): Promise<PrismaTodo> {
    const { image } = await this.prisma.todo.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.todo.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }

  async findReminders(
    parentId: string,
    args: Prisma.ReminderFindManyArgs
  ): Promise<PrismaReminder[]> {
    return this.prisma.todo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reminders(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.todo
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
